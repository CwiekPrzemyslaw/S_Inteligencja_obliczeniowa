FUNCTION read_tsp_file(file_path):
    OPEN file at file_path
    INITIALIZE cities as empty list
    FOR each line in file:
        SPLIT line into parts
        IF parts has 3 elements AND first element is a digit:
            SET city_id to first element as integer
            SET x_coord to second element as float
            SET y_coord to third element as float
            ADD (x_coord, y_coord) to cities
    RETURN cities

FUNCTION calculate_distance(city1, city2):
    RETURN square root of ((city1[0] - city2[0])^2 + (city1[1] - city2[1])^2)

FUNCTION create_distance_matrix(cities):
    SET num_cities to length of cities
    INITIALIZE distance_matrix as a num_cities by num_cities matrix filled with 0
    FOR i from 0 to num_cities-1:
        FOR j from 0 to num_cities-1:
            IF i != j:
                SET distance_matrix[i][j] to calculate_distance(cities[i], cities[j])
    RETURN distance_matrix

FUNCTION calculate_total_distance(route, distance_matrix):
    INITIALIZE total_distance to 0
    FOR i from 0 to length of route-1:
        ADD distance_matrix[route[i]][route[i+1]] to total_distance
    ADD distance_matrix[route[-1]][route[0]] to total_distance  // Return to start
    RETURN total_distance

FUNCTION swap_cities(route):
    COPY route to new_route
    SELECT two random indices i, j
    SWAP new_route[i] and new_route[j]
    RETURN new_route

FUNCTION reverse_segment(route):
    COPY route to new_route
    SELECT two random indices i, j
    REVERSE segment of new_route from i to j
    RETURN new_route

FUNCTION insert_city(route):
    COPY route to new_route
    SELECT two random indices i, j
    REMOVE city at index i from new_route
    INSERT city at index j in new_route
    RETURN new_route

FUNCTION simulated_annealing(distance_matrix, initial_temperature, cooling_rate, num_iterations, seed):
    IF seed is not None:
        SET random seed to seed

    SET num_cities to length of distance_matrix
    INITIALIZE current_route as a list from 0 to num_cities-1
    SHUFFLE current_route randomly
    SET current_distance to calculate_total_distance(current_route, distance_matrix)
    SET best_route to copy of current_route
    SET best_distance to current_distance
    SET temperature to initial_temperature

    FOR iteration from 0 to num_iterations-1:
        SELECT move randomly from [swap_cities, reverse_segment, insert_city]
        SET new_route to result of applying move on current_route
        SET new_distance to calculate_total_distance(new_route, distance_matrix)
        SET delta_distance to new_distance - current_distance

        IF delta_distance < 0 OR random value < exp(-delta_distance / temperature):
            SET current_route to new_route
            SET current_distance to new_distance

        IF current_distance < best_distance:
            SET best_route to current_route
            SET best_distance to current_distance

        MULTIPLY temperature by cooling_rate

    RETURN best_route, best_distance

MAIN:
    SET file_paths to list of TSP file paths
    FOR each file_path in file_paths:
        SET cities to result of read_tsp_file(file_path)
        SET distance_matrix to result of create_distance_matrix(cities)

        SET initial_temperature to 1000
        SET cooling_rate to 0.995
        SET num_iterations to 10000
        SET seed to 1234

        SET best_route, best_distance to result of simulated_annealing(distance_matrix, initial_temperature, cooling_rate, num_iterations, seed)

        PRINT "Najlepsza trasa dla", file_path, ":", best_route
        PRINT "Najkrótsza odległość dla", file_path, ":", best_distance